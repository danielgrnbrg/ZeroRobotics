//Declare any variables shared between functions here
float err,err1;
double pingTargetOne[3],pingTargetTwo[3],pingTargetThree[3],pingDistItemOne[3],pingDistItemTwo[3],
	pingDistItemThree[3],pingOnePos[3],pingTwoPos[3],pingThreePos[3],satPos[3],item1Pos[3],pTargetOne[3],
	pTargetTwo[3],pTargetThree[3];
float posTarget[3],itemDist[3],d,attTarget[3];
int pingNumber,count,currentPhase,dir,pNumber;
ZRState myState;

void init(){
	//This function is called once when your code is first loaded.

	//IMPORTANT: make sure to set any variables that need an initial value.
	//Do not assume variables will be set to 0 automatically!
	pingNumber=0;
	pNumber=0;
	err=0.01;
	err1=0.035;
	pingTargetOne[0]=0.1;pingTargetOne[1]=0.15;pingTargetOne[2]=0.0;
	pingTargetTwo[0]=0.3,pingTargetTwo[1]=0.15;pingTargetTwo[2]=0.0;
	pingTargetThree[0]=0.1;pingTargetThree[1]=0.3;pingTargetThree[2]=0.0;
	pTargetOne[0]=0.0;pTargetOne[1]=0.15;pTargetOne[2]=0.0;
	pTargetTwo[0]=0.0;pTargetTwo[1]=0.15;pTargetTwo[2]=-0.2;
	pTargetThree[0]=0.0;pTargetThree[1]=0.3;pTargetThree[2]=0.0;
	count=0;
	d=0.3;
	dir=1;
}

void loop(){
	currentPhase=game.getCurrentPhase();
	if(currentPhase==1){
		if(myState<0)
			dir=-1;
	}
	//This function is called once per second.  Use it to control the satellite.
	api.getMyZRState(myState);
	game.pingForItems(itemDist);
	//DEBUG(("\nPing: Item 1 %f Item 2 %f sattelite %f", itemDist[1], itemDist[2], itemDist[0]));
	//DEBUG(("\nTargetPosPingOne: (%f,%f,%f)",pingTargetOne[0],pingTargetOne[1],pingTargetOne[2]));
	/*if(pingNumber==0){
		for(int i=0;i<3;i++){
			posTarget[i]=pingTargetOne[i];
		}
		api.setPositionTarget(posTarget);
		if(fabs(myState[0]-pingTargetOne[0])<err){
			if(fabs(myState[1]-pingTargetOne[1])<err){
				if(fabs(myState[2]-pingTargetOne[2])<err){
					pingDistItemOne[pingNumber]=itemDist[0];
					pingDistItemTwo[pingNumber]=itemDist[1];
					pingDistItemThree[pingNumber]=itemDist[2];
					pingNumber=1;
					for(int i=0;i<3;i++){
						pingOnePos[i]=myState[i];
					}
				}
			}
		}
	}
	else if(pingNumber==1){
		for(int i=0;i<3;i++){
			posTarget[i]=pingTargetTwo[i];
		}
		api.setPositionTarget(posTarget);
		if(fabs(myState[0]-pingTargetTwo[0])<err){
			if(fabs(myState[1]-pingTargetTwo[1])<err){
				if(fabs(myState[2]-pingTargetTwo[2])<err){
					pingDistItemOne[pingNumber]=itemDist[0];
					pingDistItemTwo[pingNumber]=itemDist[1];
					pingDistItemThree[pingNumber]=itemDist[2];
					pingNumber=2;
					for(int i=0;i<3;i++){
						pingTwoPos[i]=myState[i];
					}
				}
			}
		}
	}
	else if(pingNumber==2){
		//DEBUG(("\nPingOnePos: (%f,%f,%f)",pingOnePos[0],pingOnePos[1],pingOnePos[2]));
		for(int i=0;i<3;i++){
			posTarget[i]=pingTargetThree[i];
		}
		api.setPositionTarget(posTarget);
		if(fabs(myState[0]-pingTargetThree[0])<err){
			if(fabs(myState[1]-pingTargetThree[1])<err){
				if(fabs(myState[2]-pingTargetThree[2])<err){
					pingDistItemOne[pingNumber]=itemDist[0];
					pingDistItemTwo[pingNumber]=itemDist[1];
					pingDistItemThree[pingNumber]=itemDist[2];
					for(int i=0;i<3;i++){
						pingThreePos[i]=myState[i];
					}
					pingNumber=3;
				}
			}
		}
	}
	else if(pingNumber==3){
		//triLat(pingTargetOne,pingTargetTwo,pingTargetThree,pingDistItemOne[0],pingDistItemOne[1],
		//			 pingDistItemOne[2],0.000000000001f,satPos);
		legitTriLat();
		pingNumber=-1;
		count++;
		//satPos[0]=-satPos[0];
		//satPos[1]=-satPos[1];
	}
	else if(pingNumber==-1&&!game.haveObject(0)){
		for(int i=0;i<3;i++){
			posTarget[i]=satPos[i];
		}
		api.setPositionTarget(posTarget);
		if(itemDist[0]<err1){
			attTarget[0] = .5;
			api.setAttRateTarget(attTarget);
		}
		else{
			attTarget[0]=0.0;
			api.setAttRateTarget(attTarget);
		}
		DEBUG(("\nsatPos:(%f,%f,%f)",satPos[0],satPos[1],satPos[2]));
	}
	if(game.haveObject(0)&&pNumber==-1){
		pNumber=0;
	}*/
	if(pNumber==0){
		for(int i=0;i<3;i++){
			posTarget[i]=pTargetOne[i];
		}
		api.setPositionTarget(posTarget);
		if(fabs(myState[0]-pTargetOne[0])<err){
			if(fabs(myState[1]-pTargetOne[1])<err){
				if(fabs(myState[2]-pTargetOne[2])<err){
					pingDistItemTwo[pNumber]=itemDist[1];
					pingDistItemThree[pNumber]=itemDist[2];
					pNumber=1;
				}
			}
		}
	}
	else if(pNumber==1){
		for(int i=0;i<3;i++){
			posTarget[i]=pTargetTwo[i];
		}
		api.setPositionTarget(posTarget);
		if(fabs(myState[0]-pTargetTwo[0])<err){
			if(fabs(myState[1]-pTargetTwo[1])<err){
				if(fabs(myState[2]-pTargetTwo[2])<err){
					pingDistItemTwo[pNumber]=itemDist[1];
					pingDistItemThree[pNumber]=itemDist[2];
					pNumber=2;
				}
			}
		}
	}
	else if(pNumber==2){
		//DEBUG(("\nPingOnePos: (%f,%f,%f)",pingOnePos[0],pingOnePos[1],pingOnePos[2]));
		for(int i=0;i<3;i++){
			posTarget[i]=pTargetThree[i];
		}
		api.setPositionTarget(posTarget);
		if(fabs(myState[0]-pTargetThree[0])<err){
			if(fabs(myState[1]-pTargetThree[1])<err){
				if(fabs(myState[2]-pTargetThree[2])<err){
					pingDistItemTwo[pNumber]=itemDist[1];
					pingDistItemThree[pNumber]=itemDist[2];
					pNumber=3;
				}
			}
		}
	}
	if(pNumber==3){
		TriLatItem2();
		pNumber=4;
	}
	if(pNumber==4){
		for(int i=0;i<3;i++){
			posTarget[i]=item1Pos[i];
		}
		api.setPositionTarget(posTarget);
		if(itemDist[2]<err1){
			attTarget[2]=.5
			api.setAttRateTarget(attTarget);
		}
	}
		
	DEBUG(("\ncount: %i\nitemDists:(%f,%f,%f)",count,pingDistItemOne[0],pingDistItemOne[1],pingDistItemOne[2]));
}

void legitTriLat(){
	d = fabsf(pingTargetTwo[0]-pingTargetOne[0]);
	satPos[0] = pingTargetOne[0]*dir + ( mathSquare(d) + mathSquare(pingDistItemOne[0]) - mathSquare(pingDistItemOne[1]))/(2 * d);
	d = fabsf(pingTargetThree[1]-pingTargetOne[1]);
	satPos[1] = pingTargetOne[1] + ( mathSquare(d) + mathSquare(pingDistItemOne[0]) - mathSquare(pingDistItemOne[2]))/(2 * d);
	satPos[2] = 0.0;
}

void TriLatItem2(){
	d = fabsf(pTargetTwo[2]-pTargetOne[2]);
	item1Pos[2] = pTargetOne[2]*dir + ( mathSquare(d) + mathSquare(pingDistItemThree[0]) - mathSquare(pingDistItemThree[1]))/(2 * d);
	d = fabsf(pTargetThree[1]-pTargetOne[1]);
	item1Pos[1] = pTargetOne[1] + ( mathSquare(d) + mathSquare(pingDistItemThree[0]) - mathSquare(pingDistItemThree[2]))/(2 * d);
	item1Pos[0] = 0.0;
	item1Pos[2]=-item1Pos[2];
}

void pickUp(int itemNum){
	
	
